package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
	"unicode"

	"github.com/golang/glog"
	"github.com/leobuzhi/mit6.824/mapreduce"
)

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func mapF(filename string, contents string) []mapreduce.KeyValue {
	var kvs []mapreduce.KeyValue
	ss := strings.FieldsFunc(contents, func(r rune) bool { return !unicode.IsLetter(r) })

	times := make(map[string]int, 0)
	for _, s := range ss {
		times[s]++
	}

	for k, v := range times {
		kvs = append(kvs, mapreduce.KeyValue{Key: k, Value: fmt.Sprintf("%d", v)})
	}

	return kvs
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func reduceF(key string, values []string) string {
	cnt := 0
	for _, v := range values {
		times, err := strconv.ParseInt(v, 10, 64)
		if err != nil {
			glog.Errorf("strconv.ParseInt failed,err: %v", err)
		}
		cnt += int(times)
	}

	return fmt.Sprintf("%d", cnt)
}

var mr *mapreduce.Master

func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {

		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
		}
		mr.Wait()
	} else {
	}
}
